/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Nowis 3D (https://sketchfab.com/Nowis3D)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/kamisama-no-shinden-b6dbdf5e61c845d5925d5dd653c493cb
Title: Kamisama no Shinden
*/

import React, { useContext, useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";

import KamisamaPlanetScene from "@/assets/3d/kamisamaPlanet.glb";

import * as THREE from "three";

import { KamisamaPlanetGLTFResult, KamisamaPlanetProps } from "./types";
import { ColorPickerContext } from "@/context/colorsContext";

export const KamisamaPlanet: React.FC<
  KamisamaPlanetProps & JSX.IntrinsicElements["group"]
> = ({
  isRotating,
  setIsRotating,
  currentStage,
  setCurrentStage,
  ...props
}) => {
  const planetRef = useRef(null);

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(
    KamisamaPlanetScene
  ) as KamisamaPlanetGLTFResult;

  const { colorMap } = useContext(ColorPickerContext);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  useFrame(() => {
    if (!planetRef.current) return;

    // Smooth rotation with damping (linear interpolation)
    planetRef.current.rotation.y = THREE.MathUtils.lerp(
      planetRef.current.rotation.y,
      planetRef.current.rotation.y + rotationSpeed.current,
      0.1 // smoothing factor
    );
  });

  const handlePointerDown = (e: TouchEvent & MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  };

  const handlePointerUp = (e: TouchEvent & MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;

    const delta = (clientX - lastX.current) / viewport.width;

    planetRef.current.rotation.y += delta * 0.005 * Math.PI;

    lastX.current = clientX;

    rotationSpeed.current = delta * 0.005 * Math.PI;
  };

  const handlePointerMove = (e: TouchEvent & MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;

      planetRef.current.rotation.y += delta * 0.005 * Math.PI;

      lastX.current = clientX;

      rotationSpeed.current = delta * 0.005 * Math.PI;
    }
  };

  const handleKeyDown = (e: KeyboardEvent) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);
      planetRef.current.rotation.y += 0.005 * Math.PI;
    } else if (e.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);
      planetRef.current.rotation.y -= 0.005 * Math.PI;
    }
  };

  const handleKeyUp = (e: KeyboardEvent) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }
      if (planetRef.current) {
        planetRef.current.rotation.y += rotationSpeed.current * 2;
      }
    } else {
      const rotation = planetRef.current?.rotation.y;

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });

  useEffect(() => {
    const canvas = gl.domElement;

    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);

    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  const createDynamicTexture = (color) => {
    const canvas = document.createElement("canvas");
    canvas.width = 512;
    canvas.height = 512;
    const context = canvas.getContext("2d");
    context.fillStyle = color;
    context.fillRect(0, 0, 512, 512);
    return new THREE.CanvasTexture(canvas);
  };

  // useEffect(() => {
  // const color = "#ff0000"; // Example color
  // const dynamicTexture = createDynamicTexture(color);

  // // Apply the dynamic texture to a specific material
  // materials["Material.002"].map = dynamicTexture;
  // materials["Material.002"].needsUpdate = true;
  //   const color = new THREE.Color("#ff0000"); // Example color

  //   // Change the color of the material
  //   materials["Material.002"].color = color;
  // }, [materials]);

  const applyMeshColor = (
    materialName: keyof typeof materials,
    meshName: string
  ) => ({
    onBeforeRender: () => {
      if (colorMap[meshName]) {
        materials[materialName].color.set(colorMap[meshName]);
      }
    },
    name: meshName,
    geometry: nodes[meshName as keyof typeof nodes].geometry,
    material: materials[materialName],
  });

  return (
    <group {...props} ref={planetRef}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="Root">
            <group
              name="Icosphere"
              position={[0, 0, 1]}
              scale={[1, 1, 0.77044]}
            >
              <mesh {...applyMeshColor("Material.002", "Icosphere_1")} />
              <mesh
                // material={materials["Material.013"]}
                {...applyMeshColor("Material.002", "Icosphere_2")}
              />
            </group>
            <group name="Icosphere001" position={[0, 0, 1]}>
              <mesh {...applyMeshColor("Material.001", "Icosphere001_1")} />
            </group>
            <group
              name="Cylinder"
              position={[-0.5667, 0.17673, 1.29974]}
              scale={[0.01306, 0.01306, 0.26725]}
            >
              <mesh {...applyMeshColor("Icosphere.007", "Cylinder_1")} />
            </group>
            <group
              name="Sphere"
              position={[-0.56679, 0.17673, 1.61985]}
              scale={[0.09288, 0.09288, 0.06195]}
            >
              <mesh {...applyMeshColor("Material.015", "Sphere_1")} />
              <mesh {...applyMeshColor("Material.012", "Sphere_2")} />
            </group>
            <group
              name="Sphere001"
              position={[-0.37239, 0.56555, 1.61985]}
              scale={[0.09288, 0.09288, 0.06195]}
            >
              <mesh {...applyMeshColor("Material.015", "Sphere001_1")} />
              <mesh {...applyMeshColor("Material.012", "Sphere001_2")} />
            </group>
            <group
              name="Cylinder001"
              position={[-0.37229, 0.56555, 1.29974]}
              scale={[0.01306, 0.01306, 0.26725]}
            >
              <mesh {...applyMeshColor("Icosphere.007", "Cylinder001_1")} />
            </group>
            <group
              name="Cylinder002"
              position={[0.37265, 0.56555, 1.29974]}
              scale={[-0.01306, 0.01306, 0.26725]}
            >
              <mesh {...applyMeshColor("Icosphere.007", "Cylinder002_1")} />
            </group>
            <group
              name="Sphere002"
              position={[0.37275, 0.56555, 1.61985]}
              scale={[-0.09288, 0.09288, 0.06195]}
            >
              <mesh {...applyMeshColor("Material.015", "Sphere002_1")} />
              <mesh {...applyMeshColor("Material.012", "Sphere002_2")} />
            </group>
            <group
              name="Sphere003"
              position={[0.56716, 0.17673, 1.61985]}
              scale={[-0.09288, 0.09288, 0.06195]}
            >
              <mesh {...applyMeshColor("Material.014", "Sphere003_1")} />
              <mesh {...applyMeshColor("Material.012", "Sphere003_2")} />
            </group>
            <group
              name="Cylinder003"
              position={[0.56706, 0.17673, 1.29974]}
              scale={[-0.01306, 0.01306, 0.26725]}
            >
              <mesh {...applyMeshColor("Icosphere.007", "Cylinder003_1")} />
            </group>
            <group name="Icosphere002" position={[0, 0, 1.11118]}>
              <mesh {...applyMeshColor("Material.003", "Icosphere002_1")} />
              <mesh {...applyMeshColor("Material.006", "Icosphere002_2")} />
            </group>
            <group
              name="Cylinder004"
              position={[0, 0, -0.37996]}
              scale={[0.05184, 0.05184, 0.61591]}
            >
              <mesh {...applyMeshColor("Material.005", "Cylinder004_1")} />
            </group>
            <group
              name="Cube"
              position={[0, 0.19637, 1.04452]}
              scale={[0.33133, 0.12744, 0.00622]}
            >
              <mesh {...applyMeshColor("Icosphere.007", "Cube_1")} />
            </group>
            <group
              name="Sphere004"
              position={[0, 0.17919, 1.35099]}
              scale={0.07778}
            >
              <mesh {...applyMeshColor("Material.011", "Sphere004_1")} />
              <mesh {...applyMeshColor("Material.010", "Sphere004_2")} />
              <mesh {...applyMeshColor("Material.012", "Sphere004_3")} />
            </group>
            <group
              name="Cylinder005"
              position={[0, -0.11434, 1.17647]}
              rotation={[Math.PI / 2, 0, 0]}
              scale={[0.06539, 0.03664, 0.11849]}
            >
              <mesh {...applyMeshColor("Material.010", "Cylinder005_1")} />
              <mesh {...applyMeshColor("Material.012", "Cylinder005_2")} />
            </group>
            <group
              name="Cylinder006"
              position={[-0.29524, 0.18005, 1.17647]}
              rotation={[Math.PI / 2, -Math.PI / 2, 0]}
              scale={[0.06539, 0.03664, 0.11849]}
            >
              <mesh {...applyMeshColor("Material.012", "Cylinder006_1")} />
              <mesh {...applyMeshColor("Material.010", "Cylinder006_2")} />
            </group>
            <group
              name="Cylinder007"
              position={[0.29763, 0.18005, 1.17647]}
              rotation={[Math.PI / 2, Math.PI / 2, 0]}
              scale={[0.06539, 0.03664, 0.11849]}
            >
              <mesh {...applyMeshColor("Material.012", "Cylinder007_1")} />
              <mesh {...applyMeshColor("Material.010", "Cylinder007_2")} />
            </group>
            <group
              name="Sphere005"
              position={[0.21274, 0.46965, 1.33258]}
              scale={0.05511}
            >
              <mesh {...applyMeshColor("Material.009", "Sphere005_1")} />
              <mesh {...applyMeshColor("Material.010", "Sphere005_2")} />
              <mesh {...applyMeshColor("Material.012", "Sphere005_3")} />
            </group>
            <group
              name="Sphere006"
              position={[-0.21354, 0.46965, 1.33258]}
              scale={0.05511}
            >
              <mesh {...applyMeshColor("Material.009", "Sphere006_1")} />
              <mesh {...applyMeshColor("Material.010", "Sphere006_2")} />
              <mesh {...applyMeshColor("Material.012", "Sphere006_3")} />
            </group>
            <group
              name="Plane"
              position={[0, -0.00164, 1.13373]}
              rotation={[Math.PI / 2, 0, 0]}
              scale={[0.07735, 0.09738, 0.05606]}
            >
              <mesh {...applyMeshColor("Material.007", "Plane_1")} />
            </group>
            <group
              name="Plane001"
              position={[-0.18194, 0.17924, 1.13373]}
              rotation={[Math.PI / 2, -Math.PI / 2, 0]}
              scale={[0.07735, 0.09738, 0.05606]}
            >
              <mesh {...applyMeshColor("Material.007", "Plane001_1")} />
            </group>
            <group
              name="Plane002"
              position={[0.18384, 0.17924, 1.13373]}
              rotation={[Math.PI / 2, Math.PI / 2, 0]}
              scale={[0.07735, 0.09738, 0.05606]}
            >
              <mesh {...applyMeshColor("Material.007", "Plane002_1")} />
            </group>
            <group name="Plane003" scale={[0.11736, 0.03152, 0.03152]}>
              <mesh {...applyMeshColor("Material.003", "Plane003_1")} />
              <mesh {...applyMeshColor("Material.008", "Plane003_2")} />
            </group>
            <group name="Cube001" position={[0, 0, 2.73391]} scale={0.00277}>
              <mesh {...applyMeshColor("Material", "Cube001_1")} />
            </group>
            <group name="Plane004" position={[0, 0, 4.17959]} scale={0.03113}>
              <mesh {...applyMeshColor("Material.004", "Plane004_1")} />
            </group>
            <group
              name="Cube002"
              position={[0, 0, 1.11421]}
              scale={[0.00377, 0.00377, 0.06348]}
            >
              <mesh {...applyMeshColor("Icosphere.007", "Cube002_1")} />
            </group>
            <group
              name="Icosphere003"
              position={[0, 0, -0.4295]}
              scale={[1, 1, 0.151]}
            >
              <mesh {...applyMeshColor("Icosphere.007", "Icosphere003_1")} />
            </group>
            <group
              name="Icosphere004"
              position={[-1.11949, 0, -0.11999]}
              rotation={[0, 0, -Math.PI]}
              scale={[0.30842, 0.30842, 0.08093]}
            >
              <mesh {...applyMeshColor("Icosphere.007", "Icosphere004_1")} />
            </group>
            <group
              name="Icosphere005"
              position={[0.77359, 0.34582, 0.19252]}
              rotation={[-2.96707, 0, -Math.PI]}
              scale={[0.30842, 0.30842, 0.08093]}
            >
              <mesh {...applyMeshColor("Icosphere.007", "Icosphere005_1")} />
            </group>
            <group
              name="Icosphere006"
              position={[-0.0934, -0.62145, 0.12214]}
              rotation={[-Math.PI, 0, Math.PI / 2]}
              scale={[0.19582, 0.60752, 0.08093]}
            >
              <mesh {...applyMeshColor("Icosphere.007", "Icosphere006_1")} />
            </group>
            <group
              name="Icosphere007"
              position={[0.80126, -0.92904, -0.06034]}
              rotation={[-0.00001, 0.17453, -1.57079]}
              scale={[0.19324, 0.47054, 0.08258]}
            >
              <mesh {...applyMeshColor("Icosphere.007", "Icosphere007_1")} />
            </group>
            <group
              name="Icosphere008"
              position={[0, 0.17934, 1.49151]}
              scale={0.01437}
            >
              <mesh {...applyMeshColor("Material.010", "Icosphere008_1")} />
            </group>
          </group>
        </group>
      </group>
    </group>
  );
};

export default KamisamaPlanet;
